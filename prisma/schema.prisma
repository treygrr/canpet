// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  privateKey String     @unique @default(uuid())
  salt       String?    @unique()
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  username   String     @unique
  email      String     @unique
  password   String
  firstName  String     @db.VarChar(255)
  lastName   String     @db.VarChar(255)
  age        Int?       @db.SmallInt
  bio        String?    @db.VarChar(1000)
  Posts      Post[]
  Addresses  Address[]
  Locations  Location[]
  Devices    Device[]
}

model Device {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  name         String   @db.VarChar(255)
  User         User     @relation(fields: [userId], references: [id])
  userId       Int
  userAgent    String   @db.VarChar(1000)
  ipAddress    String   @db.VarChar(255)
  refreshToken String?  @unique
}

model Location {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String    @db.VarChar(255)
  published Boolean   @default(false)
  Posts     Post[]
  Animals   Animal[]
  Addresses Address[]
  Users     User[]
}

model Address {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  addressLine1  String       @db.VarChar(255)
  addressLine2  String?      @db.VarChar(255)
  city          String       @db.VarChar(255)
  state         String       @db.VarChar(255)
  zip           String       @db.VarChar(255)
  country       String       @db.VarChar(255)
  Location      Location?    @relation(fields: [locationId], references: [id])
  locationId    Int?
  AddressType   AddressType? @relation(fields: [addressTypeId], references: [id])
  addressTypeId Int?
  User          User?        @relation(fields: [userId], references: [id])
  userId        Int?
}

model AddressType {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String    @db.VarChar(255)
  Address   Address[]
}

model Post {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  title      String    @db.VarChar(255)
  content    String?
  published  Boolean   @default(false)
  author     User      @relation(fields: [authorId], references: [id])
  authorId   Int
  Location   Location? @relation(fields: [locationId], references: [id])
  locationId Int?
}

model Animal {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String    @db.VarChar(255)
  adopted     Boolean   @default(false)
  published   Boolean   @default(false)
  Location    Location  @relation(fields: [locationId], references: [id])
  locationId  Int
  Species     Species   @relation(fields: [speciesId], references: [id])
  speciesId   Int
  birthDate   DateTime?
  adoptedDate DateTime?
  adoptionFee Int?      @db.SmallInt
  age         Int?      @db.SmallInt
  weight      Int?      @db.SmallInt
  height      Int?      @db.SmallInt
  description String?   @db.VarChar(1000)
  Breeds      Breed[]
  Colors      Color[]
}

model Color {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @db.VarChar(255)
  Animal    Animal[]
}

model Species {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @db.VarChar(255)
  Animals   Animal[]
  Breeds    Breed[]
}

model Breed {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @db.VarChar(255)
  Species   Species  @relation(fields: [speciesId], references: [id])
  speciesId Int
  Animals   Animal[]
}
