// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  privateKey String     @unique @default(uuid())
  salt       String     @default(uuid())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  username   String     @unique
  email      String     @unique
  password   String
  firstName  String     @db.VarChar(255)
  lastName   String     @db.VarChar(255)
  age        Int?       @db.SmallInt
  bio        String?    @db.VarChar(1000)
  posts      Post[]
  address    Address[]
  location   Location[]
}

model Location {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String    @db.VarChar(255)
  published Boolean   @default(false)
  authorId  Int
  post      Post[]
  animal    Animal[]
  user      User[]
  address   Address[]
}

model Address {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  addressLine1  String       @db.VarChar(255)
  addressLine2  String?      @db.VarChar(255)
  city          String       @db.VarChar(255)
  state         String       @db.VarChar(255)
  zip           String       @db.VarChar(255)
  country       String       @db.VarChar(255)
  location      Location?    @relation(fields: [locationId], references: [id])
  locationId    Int?
  addressType   AddressType? @relation(fields: [addressTypeId], references: [id])
  addressTypeId Int?
  user          User?        @relation(fields: [userId], references: [id])
  userId        Int?
}

model AddressType {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String    @db.VarChar(255)
  address   Address[]
}

model Post {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  title      String    @db.VarChar(255)
  content    String?
  published  Boolean   @default(false)
  author     User      @relation(fields: [authorId], references: [id])
  authorId   Int
  location   Location? @relation(fields: [locationId], references: [id])
  locationId Int?
}

model Animal {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String        @db.VarChar(255)
  adopted      Boolean       @default(false)
  published    Boolean       @default(false)
  location     Location      @relation(fields: [locationId], references: [id])
  locationId   Int
  species      Species       @relation(fields: [speciesId], references: [id])
  speciesId    Int
  birthDate    DateTime?
  adoptedDate  DateTime?
  adoptionFee  Int?          @db.SmallInt
  age          Int?          @db.SmallInt
  weight       Int?          @db.SmallInt
  height       Int?          @db.SmallInt
  description  String?       @db.VarChar(1000)
  animalBreed  AnimalBreed[]
  animalColors AnimalColor[]
}

model AnimalColor {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  animal    Animal   @relation(fields: [animalId], references: [id])
  animalId  Int
  color     Color    @relation(fields: [colorId], references: [id])
  colorId   Int
}

model Color {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  name        String        @db.VarChar(255)
  animalColor AnimalColor[]
}

model AnimalBreed {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  animal    Animal   @relation(fields: [animalId], references: [id])
  animalId  Int
  breed     Breed    @relation(fields: [breedId], references: [id])
  breedId   Int
}

model Species {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @db.VarChar(255)
  animal    Animal[]
  breed     Breed[]
}

model Breed {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  name        String        @db.VarChar(255)
  species     Species       @relation(fields: [speciesId], references: [id])
  speciesId   Int
  AnimalBreed AnimalBreed[]
}
